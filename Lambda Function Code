import boto3
import json
from datetime import datetime

def lambda_handler(event, context):
    # Initialize Transcribe client
    transcribe = boto3.client('transcribe')

    # Get details about the uploaded object
    bucket = event['Records'][0]['s3']['bucket']['name']
    key = event['Records'][0]['s3']['object']['key']
    job_name = f"transcribe-job-{key.replace('/', '-')}_{datetime.now().strftime('%Y%m%d%H%M%S')}"  # Use a unique job name for each file with timestamp

    # Specify the input/output paths
    job_uri = f"s3://{bucket}/{key}"
    output_bucket = 'midway0989'  # Store the transcript in the midway0989 bucket

    # Start transcription job
    transcribe.start_transcription_job(
        TranscriptionJobName=job_name,
        Media={'MediaFileUri': job_uri},
        MediaFormat=key.split('.')[-1],  # Extract the file format from the key
        LanguageCode='en-US',  # Set the language code accordingly
        OutputBucketName=output_bucket
    )

    print(f"Transcription job started for: {key}")

    # Call get_transcription_text function after transcription job completion
    return get_transcription_text(job_name)

def get_transcription_text(transcription_job_name):
    # Initialize Transcribe client
    transcribe = boto3.client('transcribe')

    # Get the transcription result
    response = transcribe.get_transcription_job(TranscriptionJobName=transcription_job_name)
    status = response['TranscriptionJob']['TranscriptionJobStatus']

    print(f"Transcription job status: {status}")  # Print transcription job status

    # Check if the job is completed
    if status == 'COMPLETED':
        # Get the transcript file URI
        transcript_file_uri = response['TranscriptionJob']['Transcript']['TranscriptFileUri']
        
        # Download the transcript file from S3
        s3 = boto3.client('s3')
        object_key = transcript_file_uri.split('/')[-1]
        response = s3.get_object(Bucket=bucket, Key=object_key)
        transcript_json = json.loads(response['Body'].read())
        
        # Extract transcript text from JSON
        transcript_text = transcript_json['results']['transcripts'][0]['transcript']

        # Save transcript text to a TXT file in the midway0989 bucket
        txt_filename = f"{transcription_job_name}.txt"
        s3.put_object(Body=transcript_text.encode('utf-8'), Bucket='midway0989', Key=txt_filename)

        print(f"Transcript saved as {txt_filename}")  # Print success message

        return {
            'statusCode': 200,
            'body': json.dumps(f"Transcript saved as {txt_filename}")
        }

    elif status == 'FAILED':
        raise Exception('Transcription job failed')

    else:
        raise Exception('Transcription job is still in progress')
